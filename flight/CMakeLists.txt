cmake_minimum_required(VERSION 2.6)

SET( board "rpi" CACHE BOOL "board" )
SET( frame "XFrame" CACHE BOOL "frame" )
SET( camera "Raspicam" CACHE BOOL "camera" )
SET( socket 1 CACHE BOOL "socket" )
SET( rawwifi 1 CACHE BOOL "rawwifi" )

option(board "board")
option(frame "frame")
option(camera "camera")
option(debug "debug")
option(socket "socket")
option(rawwifi "rawwifi")

if ( ${board} MATCHES "rpi" )
	set( CMAKE_TOOLCHAIN_FILE ${CMAKE_SOURCE_DIR}/../Toolchain-RaspberryPi.cmake )
endif()

project(flight)

set( BOARDS generic rpi )
set( FRAMES XFrame )

if ( ${board} MATCHES OFF )
	message( FATAL_ERROR "You must specify a target board.\nAvailable boards are :\n${BOARDS}" )
endif()

if ( ${frame} MATCHES OFF )
	message( FATAL_ERROR "You must specify a target frame.\nAvailable frames are :\n${FRAMES}" )
endif()

list( FIND BOARDS ${board} board_found )
if ( ${board_found} LESS 0 )
	message( FATAL_ERROR "Board ${board} not supported.\nAvailable boards are :\n${BOARDS}" )
endif()

list( FIND FRAMES ${frame} frame_found )
if ( ${frame_found} LESS 0 )
	message( FATAL_ERROR "Frame ${frame} not supported.\nAvailable frames are :\n${FRAMES}" )
endif()

if ( ${board} MATCHES "rpi" )
	set( CAMERAS Raspicam )
endif()

if ( ${camera} MATCHES OFF )
	message( FATAL_ERROR "You must specify a target frame.\nAvailable cameras for this board are :\n${CAMERAS}" )
endif()

list( FIND CAMERAS ${camera} camera_found )
if ( ${camera_found} LESS 0 )
	message( FATAL_ERROR "Board ${camera} not supported.\nAvailable cameras for this board are :\n${CAMERAS}" )
endif()

include( boards/${board}/board.cmake )
add_definitions( -DBOARD=${board} -DBOARD_${board} )
add_definitions( -DFRAME=${frame} -DFRAME_INCLUDE="${frame}.h" )
add_definitions( -DCAMERA=${camera} -DCAMERA_INCLUDE="${camera}.h" )
add_definitions( -DBUILD_SOCKET=${socket} )
add_definitions( -DBUILD_RAWWIFI=${rawwifi} )

set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=c11 -fgnu89-inline" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11 -Wno-pmf-conversions" )
set( CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -Wall -std=c11" )
set( CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -Wall -std=c11" )

if ( "${debug}" MATCHES "yes" OR "${debug}" MATCHES "1" )
	set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g3" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g3" )
	set( CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -g3" )
	set( CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -g3" )
else()
	set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s -Os" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s -Os" )
	set( CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -s -Os" )
	set( CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} -s -Os" )
endif()

include_directories( ${CMAKE_BINARY_DIR} )
include_directories( ${CMAKE_SOURCE_DIR} )
include_directories( . )
include_directories( boards/${board} )
include_directories( stabilizer )
include_directories( console )
include_directories( frames )
include_directories( links )
include_directories( motors )
include_directories( sensors )
include_directories( video )
if ( "${rawwifi}" MATCHES 1 )
	add_subdirectory( ${CMAKE_SOURCE_DIR}/../librawwifi ${CMAKE_BINARY_DIR}/librawwifi )
	include_directories( ${CMAKE_SOURCE_DIR}/../librawwifi )
	set( LIBS ${LIBS} ${CMAKE_BINARY_DIR}/librawwifi/librawwifi.a -lpcap )
endif()

file( GLOB_RECURSE BOARD_SOURCES boards/${board}/*.cpp boards/${board}/*.c )
file( GLOB_RECURSE CONSOLE_SOURCES console/*.cpp )
file( GLOB_RECURSE FRAMES_SOURCES frames/*.cpp )
file( GLOB_RECURSE LINKS_SOURCES links/*.cpp )
file( GLOB_RECURSE MOTORS_SOURCES motors/*.cpp )
file( GLOB_RECURSE SENSORS_SOURCES sensors/*.cpp )
file( GLOB_RECURSE VIDEO_SOURCES video/*.cpp )
file( GLOB_RECURSE STABILIZER_SOURCES stabilizer/*.cpp )
set( SOURCES Main.cpp Controller.cpp PowerThread.cpp Matrix.cpp ${CMAKE_BINARY_DIR}/flight_register.cpp )
list( APPEND SOURCES ${BOARD_SOURCES} )
list( APPEND SOURCES ${STABILIZER_SOURCES} )
list( APPEND SOURCES ${CONSOLE_SOURCES} )
list( APPEND SOURCES ${FRAMES_SOURCES} )
list( APPEND SOURCES ${LINKS_SOURCES} )
list( APPEND SOURCES ${MOTORS_SOURCES} )
list( APPEND SOURCES ${SENSORS_SOURCES} )
list( APPEND SOURCES ${VIDEO_SOURCES} )

set_source_files_properties( ${CMAKE_BINARY_DIR}/flight_register.cpp PROPERTIES GENERATED TRUE )
add_custom_target( flight_register COMMAND ${CMAKE_SOURCE_DIR}/../tools/startup_gen.py ${CMAKE_SOURCE_DIR}/flight ${CMAKE_BINARY_DIR}/flight_register.cpp )
add_executable( flight_unstripped ${SOURCES} )
add_dependencies( flight_unstripped flight_register )
if ( "${rawwifi}" MATCHES 1 )
	add_dependencies( flight_unstripped rawwifi )
endif()

target_link_libraries( flight_unstripped ${LIBS} ${BOARD_LIBS} )

board_strip()
